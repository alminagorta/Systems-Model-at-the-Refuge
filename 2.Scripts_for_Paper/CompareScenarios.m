function [hFigs] = CompareScenarios(sGDXfiles,sScenNames,vFigs,mColor,ElsToPlot)
% Generate plots and/or tables to compare results from two or more SWAMPS
% scenarios saved in two or more GDX files

% EXAMPLE USES:
% >> CompareScenarios({'ResultSim' 'ResultGate'},{'Prior Management' 'Model Recommend''},[1]) ; 
                % Genarate Figure 5 in manuscript compare water levels
% >> CompareScenarios({'ResultSim.gdx','ResultOpt.gdx','ResultCV0.gdx','ResultCV2.gdx','ResultCV3.gdx';'GeoResultSim.gdx','GeoResultOpt.gdx','GeoResultCV0.gdx','GeoResultCV2.gdx','GeoResultCV3.gdx'},{{'Observed' 'Model\newlineRecommended' 'No Invasive Veg.\newlineor Growth' '2x Invasive Veg.' '3x Invasive Veg.'},{'Multiply' 'Geometric'}} ,[8])
%                      Generate Figure 8 in the manuscript that compares geometric and multiply results for the 5 scenarios
% >> CompareScenarios({'ResultSim' 'ResultGate' 'ResultOpt' 'ResultCV0' 'ResultCV2' 'ResultCV3'},{'Prior Management' 'Model Recommended' 'Auotmatic Gates' 'No Invasive Vegetation or Growth' '2x Invasive Vegetation Growth' '3x InvasiveVegetation Growth'},[7]);
%                       Generate Table 2 WU Results for all scenarios
% >> CompareScenarios({'ResultSim' 'ResultGate' 'ResultOpt'},{'Prior Management' 'Model Recommended' 'Auotmatic Gates'},[1 3 7]);
%                   % Compare water levels, invasive vegetation cover, and  table of overall WU for three scenarios
%
% >> CompareScenarios({'Result' 'ResultOrigOpt' 'ResultDVSOpt'},{'Observed' 'Orig-Optimize' 'DVS-Optimized'},[1 2 5 7],[1 0 0; 0.3	0.65 1; 0 0.25 1])
%                       Use results in the three gdx files to generate plots 1, 2, 5, and 7. Label the three scenarios and color them.
%
% INPUTS:
%sGDXfiles = cell array of strings to the GDXfiles with results data (one
%       file name per scenario)
%sScenNames = cell array of strings of the scenario names to include in
%       legend captions
%vFigs = vector of numbers indicating figures/Tables to generate (default or empty - all)
%   1= water levels
%   2 = water storage
%   3 = Invasive vegetation cover
%   4= HSI of invasive vegetation cover
%   5 = WUAW
%   6 = Compostive Suitability map
%   7 = Overall WUAW table
%   8 = Overall WUAW bar chart for scenarios with two series (sGDXfiles
%   should be a n x 2 cell matrix with each column becoming a separate bar
%   series)
%mColor = s x 3 matrix of color codes for the lines corresponding to the s scenarios
%ElsToPlot = 1 x d vector of cell strings containing the element names to
%   filter and plot (omit to plot all in the uel)
%hFigs = vector of handles to figures generated by the script

%Updated: July 3-2015
%Developed by Omar Alminagorta
%Dept. of Civil & Environmental Engineering and Utah Water Research Lab
%Utah State University
% o.alminagorta@aggiemail.usu.edu  
%
%%
% If you use the code, cite as:
% Alminagorta, O., D. E. Rosenberg, and K. M. Kettenring, Systems modeling to improve  the  hydro-ecological  performance  of
% diked  wetlands, (Under Review to resubmit to Water Resources Research Journal).

%%   Licensing:
% Copyright (c) 2015, Omar Alminagorta and David E. Rosenberg
% All rights reserved.
% 
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
% 
% 1. Redistributions of source code must retain the above copyright notice, this
%   list of conditions and the following disclaimer.
% 
% 2. Redistributions in binary form must reproduce the above copyright notice,
%   this list of conditions and the following disclaimer in the documentation
%   and/or other materials provided with the distribution.
% 
% 3. Neither the name of the copyright holder nor the names of its
%   contributors may be used to endorse or promote products derived from
%   this software without specific prior written permission.
% 
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
% DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
% FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
% DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
% SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
% CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
% OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
% OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


    %Names of the GAMS parameters,axis titles, etc. to use. Index # => plot
    %number
    sParams = {'WDepth', 'S', 'CVInvasive','HSI_CVinv','WUAW','HSIcomp','Obj' 'Obj'};
    sAxisTitles = {'Staff Gage Reading (m)','Storage (Ha-m)','Invasive Vegetation Cover (fraction)','Habitat Suitability of Invasive Vegetation Cover','Weighted Usable Area for Wetlands (km^2)' 'Composite Habitat Suitability' 'Weighted Usable Area for Wetlands (km^2)'  sprintf('%s\n%s','Weighted Usable Area for Wetlands','(km^2)')};
    vConvert = [1 1 1 1 1e-6 1 1e-6 1e-6];
    vMaxVals = [3 NaN NaN 1 NaN 1 1];

    if nargin<3
        vFigs = [1:7]; %default to generate all figures
    end
    
    if nargin <4
        mColor = [];
    end
    
    if nargin <5
        ElsToPlot={};
    end
    
    if (ismember(8,vFigs)==0) + (size(sGDXfiles) ~= size(sScenNames)) == 2
        hFigs = 0;
        return
    end
    
    hFigs = 0*vFigs;
    
    for i=vFigs
        if i<= 5
            hFigs(i) = MakeBarFig(sGDXfiles,sScenNames,sParams{i},sAxisTitles{i},vMaxVals(i),vConvert(i), mColor,ElsToPlot);
        elseif i==6
            hFigNew =  MakeMapFig(sGDXfiles,sScenNames,sParams{i},sAxisTitles{i},vMaxVals(i),vConvert(i),'units2.tif','unit2.xlsx');
            hFigs(i) = hFigNew(1);
        elseif i==7
            hFigs(i) = MakeTable(sGDXfiles,sScenNames,sParams{i},sAxisTitles{i},vConvert(i));
        else
             hFigs(i) =   MakeBarCompare(sGDXfiles,sScenNames,sParams{i},sAxisTitles{i},vConvert(i));
        end
    end
end

function hFigInd = MakeBarFig(sGDXfiles,sScenNames,sParam,sAxisTitle,MaxYVal,vConvert,mColors,ElsToPlot)
    %% Bar plot of parameter sParam (name) in the sGDXfiles
    % 5 x 5 matrix plot, one cell per wetland unit, sParam on the Y axis.
    % First scenario is bars, second scenario is a red line. If three or
    % more scenarios, all traces are lines
    % sAxisTitle = title to put on y-axis
    % MaxYVal = maximum y value on axis / ticks
    % vConvert = factor to multiply results by
    % mColor = optional nS x 3 matrix of colors for the nS scenarios.    
    % ElsToPlot = optional 1 x d vector of cell strings with uel element names
    %               to plot (omit, will plot all uels in the sParam)
        
    %To expand the figure full screen 
    hFigInd = figure('units','normalized','outerposition',[0 0 1 1]);

    %Read in results from GDX
    sRes.name = sParam;
    sRes.form = 'full';
    sRes.compress = true;
       
    NumScens = size(sGDXfiles,2);
    
    mRes = cell(NumScens,1); %store for data
         
    if (nargin < 6) || isempty(mColors)
        %Set up default color scheme - default: first bars blue, second trace red; If multiple, an
       %ascending blue color scheme
        if NumScens <= 2
            mColors = [0 0 1; 1 0 0];
        elseif NumScens == 3
            mColors = [0.6	0.9	1; 0.3	0.65	1; 0	0.25	1];
        else
            mColors = OSUColorRamps('LightToDarkBlue10Step');
        end
    end   
    
    %Read in the data for each scenario
    for i=1:NumScens
        sResRead = rgdx(sGDXfiles{i},sRes);
        mRes{i} = vConvert*squeeze(sResRead.val);
    end
    
    text9 = sResRead.uels{4};
    vMons = str2double(sResRead.uels{2});
        
    
    %[WD,text9]=xlsread('Result.xlsx','CheckWater','D36:AB49'); %Here is the Water Depth Optimized
    %Filter and only plot selected elements
    
    if isempty(ElsToPlot)
        ElsToPlot = text9;
    end
    
    %Make each matrix plot - one per wetland unit
    for k4=1:size(ElsToPlot,2) %size(mRes{1},2)
         unit4=genvarname(ElsToPlot{k4});
         
         %Find index of element in original dataset
         OrigInd = sum(strcmpi(text9,ElsToPlot(k4)).*[1:size(text9,2)]);
        %plotting
        cSP = subplot(5,5,k4);
        hold on
            for i=1:NumScens %each trace on each plot
                  if (NumScens <=2) && (i==1)
                      %Plot as bars
                      hBar = bar(mRes{i}(:,OrigInd),0.6);
                      set(hBar,'facecolor',mColors(i,:));
                  else
                      plot(vMons,mRes{i}(:,OrigInd),'marker','none','linewidth',2,'color',mColors(i,:));
                  end
            end
            hold off %Optimization Water depth
            
        %Attribute the plot    
        if k4==23,xlabel('Month','fontsize',20,'FontName','Times New Roman'); end
        if k4==11,ylabel(sAxisTitle,'fontsize',20,'FontName','Times New Roman');end
        title(unit4(2:end),'FontSize',18,'FontName','Times New Roman');
        hold off
       %axis tight
       set(gca,'XLim',[0.5 12.5],'FontSize',12);
       if ~isnan(MaxYVal)
            set(gca,'YLim',[0 MaxYVal]);
       end
        set(gca,'FontSize',20,...
        'FontName','Times New Roman','XTick',[2 4 6 8 10 12])
        for i=1:5
            if k4==i set(gca, 'XAxisLocation', 'top');end
        end

        for j=0:5:25
            if k4==j set(gca, 'YAxisLocation', 'right');end
        end

        for l= [2,3,4,7,8,9,12,13,14,17,18,19,22,23,24]
            if k4==l set(gca,'YTick',[]); end
        end 

        for m= [6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
            if k4==m set(gca,'XTick',[]); end
        end

    end

    hleg = legend(sScenNames{:});

    % Make the text of the legend italic and color it brown 
    set(hleg,'Orientation','horizontal',...
        'Position',[0.555067372972596 0.0110239385102722 0.37124183006536 0.0521551724137931],...
        'FontSize',12,...
        'FontName','Times New Roman');
end

function [hTab] = MakeTable(sGDXfiles,sScenNames,sParam,sColTitle,nConvert)
    % Plot results stored in sGDXfile as map on top of map image sMapFile with locations in xls
    %file sLocData has location (positioning data) for points in sGDXfiles
    %
    % Column 1 is the Scenario Name, Column 2 is the value
    % sColTitle is the title to put in the 2nd column of values
    % nConvert = conversion factor applied to numerical results (multiply)
    
    %Read in the data from GDX
    sRes.name = sParam;
    sRes.form = 'full';
    sRes.compress = true;
    
    NumScens = size(sGDXfiles,2); 
    
    hTab = figure;
   
    mData = zeros(NumScens,1);
    %Read in data from GDX files
    for i=1:NumScens
        sOut = rgdx(sGDXfiles{i},sRes);
        mData(i) = sOut.val;
    end
    
    %mDataCell = ThousandSep(mData);
    mDataCell = (round(nConvert*mData'));
    
    % Create the column names in cell arrays 
    cnames = {sColTitle};

    % Create the uitable
    t = uitable(hTab,'Data',mDataCell','ColumnName',cnames,'RowName',sScenNames,'FontSize',16,'ColumnFormat',{'numeric'});
    % Set width and height
    t.Position(3) = t.Extent(3);
    t.Position(4) = t.Extent(4); 
    
    %Also dump the scenario table to Excel
    xlswrite('ScenResults',{'Scenario', sColTitle},'ScenResults','A1:B1');
    xlswrite('ScenResults',sScenNames','ScenResults','A2');
    xlswrite('ScenResults',mDataCell','ScenResults','B2');
    
end

function [hTab] = MakeBarCompare(sGDXfiles,sScenNames,sParam,sParamLabel, nConvert)
    % Plot results stored in sGDXfile as a grouped bar graph
    %          sGDXfle is a 2 x n cell matrix with row 1 first bar color
    %                and row 2 second bar color
    %
    % SRowTitle is a n x 1 cell matrix of labels for the rows (becomes the
    %       legend entry)
     % nConvert = conversion factor applied to numerical results (multiply)
    
    %Read in the data from GDX
    sRes.name = sParam;
    sRes.form = 'full';
    sRes.compress = true;
    
    [NumAlts NumScens] = size(sGDXfiles); 
    
    hTab = figure;
   set(hTab,'Position',[46   264   673   515]);
   
    mData = zeros(NumAlts,NumScens);
    %Read in data from GDX files
    for i=1:NumAlts
        for j=1:NumScens
            sOut = rgdx(sGDXfiles{i,j},sRes);
            mData(i,j) = sOut.val;
        end
    end
    
    %mDataCell = ThousandSep(mData);
    mDataFin = nConvert*mData;
    
  %Create the bar graph
  axes1 = axes('Parent',hTab,'Position',[0.199108469539376 0.366990291262134 0.7518573551263 0.558009708737857]);
 
  hold(axes1,'on');
  
  ax = bar(mDataFin');
  
  ax(1).FaceColor = [1 0 0];
  ax(2).FaceColor = [0 0 1];
  set(axes1,'XTickLabelRotation',90)

  set(gca,'FontSize',16);
  sAltLabels = sScenNames{1};
  set(axes1,'xTickLabel',sAltLabels,'xTick',[1:NumScens],'xLim',[0.5 NumScens+0.5]);
  ylabel(sParamLabel,'Fontsize',16);
  sRowLabels = sScenNames{2};
  lng =  legend(sRowLabels{:},'Fontsize',14);
  set(lng,...
    'Position',[0.206042599241115 0.807119743993751 0.213967306652891 0.108737861184241]);

    
end

function [hMap] = MakeMapFig(sGDXfiles,sScenNames,sParam, sYTitle, YMaxVal, vConvert, sMapFile,sLocData)
    %Plot results stored in sGDXfile as map on top of map image sMapFile with locations in xls
    %file sLocData has location (positioning data) for points in sGDXfiles
    %Produces one map per scenario.
    % vConvert = conversion factor to apply to results

    %% HSI composed- Spatially and temporally map 
    % close all; clear all; clc;
    
    hMap = [];
    
    I=imread(sMapFile); %'units2.tif');
    Igrey=rgb2gray(I);
    W=Igrey(:,300:350);
    iq=W==162;
    W(iq)=170;
    Igrey(:,300:350)=W;

    %9.1.3 Reading excell between number of map and Units name
    U=dataset('xlsfile',sLocData); %'unit2.xlsx');
    ID1=U.Values;
    Name2=U.Unit;
    x=U.X;
    y=U.Y;

    %Read in the data from GDX
    sRes.name = sParam;
    sRes.form = 'full';
    sRes.compress = true;
    
    NumScens = size(sGDXfiles,2);
    
    for i=1:NumScens
        sResRead = rgdx(sGDXfiles{i},sRes);

        mPlotData = vConvert*squeeze(sResRead.val);
        
        Umonth1 = str2double(sResRead.uels{2});
        uName2 = sResRead.uels{4};

        %HSI composed : Pull data from Excel file
        
        %HSI_comp=dataset('xlsfile','Result.xlsx','sheet','HSIcomp','range','A1:E300','ReadVarNames','off');
        %Umonth1=nominal(HSI_comp.Var2);
        %UName2=HSI_comp.Var4;
        %HSIspec1=HSI_comp.Var5;

        %To set names to the plot (missing to incorporate)
        monthName={'Jan'  'Feb'  'Mar'  'Apr'  'May'  'Jun'  'Jul'  'Aug'  'Sep'  'Oct'  'Nov'  'Dec'};

        % Analyzing month by month and for one species
        hMap = [hMap figure('Name',['Composite Suitability Map - ',sScenNames{i}],'units','normalized','outerposition',[0 0 1 1])];
        set(gca,'Color','w');
        set(gcf,'Color','w')
        for j=1:length(Umonth1)
            %ind1=(Umonth1==num2str(j));
            %Selecting unit and values based on index1
            %uName2=UName2(ind1);
            %uResults3=HSIspec1(ind1); 
            uResults3 = mPlotData(j,:);

            %Intersection of Units between Map Code and Values of GAMS 
            [cName, iOr2, iuu2] = intersect(Name2,uName2);
            Rmon1=uResults3(iuu2);
            u1m=zeros(size(ID1));
            %Getting only map of the results
            u1m(iOr2)=Rmon1;
            Igreym=NaN(size(Igrey));
            for i=1:length(cName);
                inde=find(Igrey==ID1(iOr2(i)));
            Igreym(inde)=Rmon1(i);
            end
            subplot(4,3,j); 
            % To map the results
               mesh(flipud(Igreym));
                %colormap(pink);
                colormap(flipud(pink));
                 view(2)
             xlim([50 400]) ;
            ylim([0 250]);
            axis off;
            title([monthName(j)],'FontSize',14,'FontName','Times New Roman');
            hold on ;
            contour (flipud(Igrey),'Color','k','LineWidth',0.8);
               alpha(0.3);

            whitebg('w')
            set(gca,'Color','w');
            set(gcf,'Color','w')

            axis fill
            clim=[0 1]; % Data range...
              caxis(clim);
            if j==1,
            h=colorbar;
              set(h,'position',[ 0.0921339998649555 0.104437593984962 0.01219 0.815],'AxisLocation','in',...
                'FontSize',14,...
                'FontName','Times New Roman');
            end

        end

        % Create textbox
        annotation('textbox',...
            [0.0111278914747058 0.877737226277371 0.0910518053375196 0.071129046966679],...
            'String',{'Excellent'},...
            'FontSize',14,...
            'FontName','Times New Roman',...
            'FitBoxToText','off',...
            'LineStyle','none');

        % Create textbox
        annotation('textbox',...
            [0.0383469513025919 0.0941277833855477 0.0806326530612243 0.0448113207547169],...
            'String',{'Poor'},...
            'FontSize',14,...
            'FontName','Times New Roman',...
            'FitBoxToText','off',...
            'LineStyle','none');
    end
end
